//
//  TimeRemindRemind.m
//
//  Created by 于飞跃  on 13-8-16
//  Copyright (c) 2013 __MyCompanyName__. All rights reserved.
//

#import "TimeRemindRemind.h"
#import "TimeRemindInfos.h"


@interface TimeRemindRemind ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end

@implementation TimeRemindRemind

@synthesize count = _count;
@synthesize infos = _infos;


+ (TimeRemindRemind *)modelObjectWithDictionary:(NSDictionary *)dict
{
    TimeRemindRemind *instance = [[[TimeRemindRemind alloc] initWithDictionary:dict] autorelease];
    return instance;
}

- (id)initWithDictionary:(NSDictionary *)dict
{
    self = [super init];
    
    // This check serves to make sure that a non-NSDictionary object
    // passed into the model class doesn't break the parsing.
    if(self && [dict isKindOfClass:[NSDictionary class]]) {
            self.count = [self objectOrNilForKey:@"count" fromDictionary:dict];
    NSObject *receivedTimeRemindInfos = [dict objectForKey:@"infos"];
    NSMutableArray *parsedTimeRemindInfos = [NSMutableArray array];
    if ([receivedTimeRemindInfos isKindOfClass:[NSArray class]]) {
        for (NSDictionary *item in (NSArray *)receivedTimeRemindInfos) {
            if ([item isKindOfClass:[NSDictionary class]]) {
                [parsedTimeRemindInfos addObject:[TimeRemindInfos modelObjectWithDictionary:item]];
            }
       }
    } else if ([receivedTimeRemindInfos isKindOfClass:[NSDictionary class]]) {
       [parsedTimeRemindInfos addObject:[TimeRemindInfos modelObjectWithDictionary:(NSDictionary *)receivedTimeRemindInfos]];
    }

    self.infos = [NSArray arrayWithArray:parsedTimeRemindInfos];

    }
    
    return self;
    
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];
    [mutableDict setValue:self.count forKey:@"count"];
NSMutableArray *tempArrayForInfos = [NSMutableArray array];
    for (NSObject *subArrayObject in self.infos) {
        if([subArrayObject respondsToSelector:@selector(dictionaryRepresentation)]) {
            // This class is a model object
            [tempArrayForInfos addObject:[subArrayObject performSelector:@selector(dictionaryRepresentation)]];
        } else {
            // Generic object
            [tempArrayForInfos addObject:subArrayObject];
        }
    }
    [mutableDict setValue:[NSArray arrayWithArray:tempArrayForInfos] forKey:@"infos"];

    return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description 
{
    return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method
- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict
{
    id object = [dict objectForKey:aKey];
    return [object isEqual:[NSNull null]] ? nil : object;
}


#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder
{
    self = [super init];

    self.count = [aDecoder decodeObjectForKey:@"count"];
    self.infos = [aDecoder decodeObjectForKey:@"infos"];
    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder
{

    [aCoder encodeObject:_count forKey:@"count"];
    [aCoder encodeObject:_infos forKey:@"infos"];
}


- (void)dealloc
{
    [_count release];
    [_infos release];
    [super dealloc];
}

@end
